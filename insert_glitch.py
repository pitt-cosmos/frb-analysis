import moby2
from moby2.instruments import actpol
from moby2.scripting import get_filebase
import random
from moby2.tod import get_glitch_cuts
import numpy as np
import matplotlib
from matplotlib import pyplot as plt

db = actpol.TODDatabase()
ids = db.select_tods()

magnitude_list = [10000,15000,20000,25000,30000,35000,40000,45000,50000]
efficiency_list = []

#Cycles through each magnitude, assigning a value for the efficiency of 
#get_glitch_cuts() of finding a signal of that magnitude
for n in magnitude_list:
    
    i = np.float32(n)
    tod_name = ids[2000].basename
    fb = get_filebase()
    tod_dir = fb.filename_from_name(tod_name, single = True)
    tod = moby2.scripting.get_tod({'filename':tod_dir, 'repair_pointing':True})
    
    #list of live detectors
    ld = [1,    2,    5,    6,    7,   11,   15,   16,   17,   18,   19,
         21,   23,   24,   26,   30,   33,   37,   38,   39,   41,   42,
         43,   45,   48,   49,   50,   51,   53,   55,   57,   58,   62,
         65,   69,   71,   73,   74,   76,   77,   78,   80,   81,   82,
         83,   85,   87,   88,   89,  100,  102,  108,  109,  110,  111,
        112,  113,  114,  115,  116,  117,  119,  123,  129,  133,  134,
        137,  138,  140,  141,  142,  143,  144,  145,  146,  147,  148,
        149,  150,  151,  152,  153,  158,  160,  161,  164,  165,  168,
        169,  171,  172,  173,  174,  176,  177,  178,  179,  180,  181,
        182,  183,  185,  187,  189,  190,  193,  195,  196,  197,  199,
        201,  202,  204,  205,  206,  207,  208,  209,  210,  211,  212,
        213,  214,  215,  216,  217,  218,  219,  221,  222,  224,  225,
        227,  228,  229,  230,  231,  233,  235,  236,  237,  238,  239,
        240,  241,  242,  243,  245,  246,  247,  248,  250,  251,  253,
        254,  256,  257,  258,  259,  260,  261,  262,  263,  265,  267,
        268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  279,
        280,  282,  283,  285,  286,  288,  289,  290,  291,  292,  293,
        294,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
        306,  307,  308,  309,  310,  311,  312,  314,  315,  318,  320,
        321,  322,  324,  325,  326,  327,  329,  330,  331,  332,  333,
        334,  335,  336,  337,  338,  339,  341,  343,  344,  346,  349,
        350,  352,  353,  354,  355,  356,  357,  359,  360,  361,  362,
        363,  364,  365,  366,  368,  369,  370,  371,  372,  374,  376,
        378,  381,  384,  385,  386,  389,  391,  393,  394,  395,  396,
        397,  398,  400,  401,  402,  403,  404,  405,  407,  408,  410,
        413,  414,  416,  417,  418,  419,  420,  421,  422,  423,  424,
        426,  427,  428,  430,  431,  432,  433,  434,  435,  436,  437,
        438,  439,  440,  442,  443,  445,  446,  448,  450,  452,  453,
        454,  455,  458,  459,  460,  461,  462,  463,  464,  465,  466,
        467,  468,  469,  470,  472,  474,  477,  478,  480,  481,  482,
        483,  484,  485,  486,  487,  488,  490,  491,  493,  494,  495,
        497,  498,  499,  500,  502,  503,  504,  505,  506,  507,  509,
        510,  513,  514,  516,  517,  518,  519,  521,  522,  523,  524,
        525,  526,  528,  529,  530,  531,  532,  533,  534,  536,  537,
        538,  539,  542,  544,  545,  547,  548,  549,  550,  551,  552,
        553,  555,  557,  558,  559,  560,  561,  562,  563,  564,  565,
        566,  567,  568,  573,  574,  576,  577,  580,  581,  582,  583,
        585,  587,  588,  589,  590,  591,  592,  593,  594,  595,  596,
        597,  598,  600,  601,  603,  605,  606,  608,  609,  610,  611,
        612,  613,  614,  615,  616,  617,  618,  619,  621,  622,  623,
        624,  625,  626,  627,  628,  629,  630,  631,  632,  633,  634,
        635,  637,  638,  640,  642,  644,  645,  646,  647,  650,  651,
        652,  653,  654,  655,  656,  657,  658,  659,  661,  664,  667,
        669,  670,  672,  673,  674,  675,  676,  677,  680,  681,  682,
        683,  684,  685,  686,  687,  688,  689,  690,  691,  692,  695,
        696,  697,  699,  701,  702,  704,  705,  708,  709,  710,  714,
        715,  716,  717,  718,  719,  720,  721,  722,  723,  724,  725,
        726,  728,  729,  730,  731,  734,  737,  738,  739,  740,  741,
        742,  743,  744,  745,  746,  748,  749,  750,  751,  752,  753,
        754,  755,  756,  757,  758,  759,  760,  761,  762,  766,  768,
        769,  772,  773,  774,  775,  778,  779,  780,  781,  784,  785,
        786,  787,  788,  789,  790,  792,  794,  795,  797,  798,  800,
        801,  802,  803,  804,  805,  806,  807,  808,  809,  810,  812,
        813,  815,  816,  817,  818,  819,  820,  822,  823,  824,  825,
        826,  827,  829,  830,  833,  836,  837,  838,  841,  842,  843,
        844,  845,  846,  848,  849,  850,  851,  852,  853,  854,  856,
        857,  858,  859,  861,  862,  864,  865,  867,  868,  869,  870,
        871,  872,  873,  874,  875,  876,  877,  878,  879,  880,  881,
        882,  883,  884,  885,  886,  888,  889,  891,  893,  894,  896,
        897,  898,  901,  902,  903,  907,  908,  909,  910,  912,  913,
        914,  915,  917,  918,  920,  922,  925,  926,  928,  929,  931,
        932,  933,  934,  935,  937,  938,  939,  940,  941,  944,  945,
        947,  948,  949,  950,  951,  952,  953,  954,  955,  957,  958,
        960,  961,  965,  966,  967,  969,  970,  971,  973,  976,  979,
        980,  981,  982,  984,  986,  989,  992,  993,  994,  996,  997,
        998,  999, 1000, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1012,
       1013, 1015, 1017, 1018, 1019, 1022]
    detected_cuts = 0
    total_cuts = 0
    #Cycles through detectors
    for d in ld:
        
        t = int(random.random()*tod.nsamps)
        tod.data[d][t] += i
        
        glitches = get_glitch_cuts(data = tod.data, dets = np.arange(tod.data.shape[0]), tod = tod, params = { 'nSig': 10.0, 'tGlitch' : 0.005, 'minSeparation' : 30, 'maxGlitch' : 50000, 'highPassFc': 5.0, 'buffer' : 0})
        cuts = glitches.extract(0, tod.nsamps)
        
        total_cuts += 1
        length_array = len(cuts.cuts[d]) - 1
        #Cycles through all the cuts on a detector checking for our signal
        for s in range(0, length_array):            
            if cuts.cuts[d][s][0] <= t <= cuts.cuts[d][s][1]:
                print n
                print t
                detected_cuts += 1
        
    efficiency = float(detected_cuts) / total_cuts
    efficiency_list.append(efficiency)
plt.plot(magnitude_list, efficiency_list, 'ro')
plt.title('Efficiency vs. Magnitude')
plt.ylabel('Efficiency of Cut Collection')
plt.xlabel('Magnitude of Fake Signal')
plt.savefig('efficiency_vs_magnitude.png', bbox_inches = 'tight')
